name: 칸반 - 백로그에 추가
description: 새로 열린 이슈를 조직 클래식 프로젝트의 백로그에 추가하고 라벨을 적용합니다
inputs:
  org:
    description: 조직 로그인(organization 로그인)
    required: true
  project-number:
    description: 클래식 프로젝트 번호
    required: false
  project-name:
    description: 클래식 프로젝트 이름(번호가 없을 때 대체)
    required: false
  backlog:
    description: 백로그 컬럼 이름
    required: true
  planned:
    description: 작업 예정 컬럼 이름
    required: true
  in-progress:
    description: 작업중 컬럼 이름
    required: true
  review:
    description: 리뷰 대기 컬럼 이름
    required: true
  done:
    description: 완료 컬럼 이름
    required: true
  github-token:
    description: 조직 클래식 프로젝트 API 접근 토큰(PAT 권장). 미설정 시 GITHUB_TOKEN 사용
    required: false
    default: ${{ github.token }}
runs:
  using: composite
  steps:
    - name: 백로그 컬럼에 카드 추가 및 라벨 적용
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const ORG = process.env.ORG || process.env.GITHUB_REPOSITORY_OWNER;
            const PROJECT_NUMBER = process.env.PROJECT_NUMBER ? parseInt(process.env.PROJECT_NUMBER, 10) : undefined;
            const PROJECT_NAME = process.env.PROJECT_NAME || undefined;
            const COLUMN_NAMES = {
              backlog: process.env.BACKLOG,
              planned: process.env.PLANNED,
              inProgress: process.env.IN_PROGRESS,
              review: process.env.REVIEW,
              done: process.env.DONE,
            };

            const inertiaHeader = { accept: 'application/vnd.github.inertia-preview+json' };

            if (!(context.eventName === 'issues' && context.payload.action === 'opened')) {
              core.info('이슈 생성 이벤트가 아님: 건너뜀');
              return;
            }

            async function getOrgProjectByNumberOrName(org, number, name) {
              const projects = await github.paginate(github.request, 'GET /orgs/{org}/projects', {
                org,
                per_page: 100,
                headers: inertiaHeader,
              });
              const found = (number && projects.find(p => p.number === number)) || (name && projects.find(p => p.name === name));
              if (!found) throw new Error(`프로젝트를 찾을 수 없습니다: number=${number}, name='${name}'`);
              return found;
            }

            async function getColumns(project_id) {
              return await github.paginate(github.request, 'GET /projects/{project_id}/columns', {
                project_id,
                per_page: 100,
                headers: inertiaHeader,
              });
            }

            async function getColumnIdByName(project_id, name) {
              const cols = await getColumns(project_id);
              const col = cols.find(c => c.name === name);
              if (!col) throw new Error(`컬럼을 찾을 수 없음: ${name}`);
              return col.id;
            }

            async function setIssueStatusLabel(owner, repo, issue_number, label) {
              const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number });
              const allStatus = Object.values(COLUMN_NAMES);
              const existing = issue.labels.map(l => typeof l === 'string' ? l : l.name);
              const filtered = existing.filter(n => !allStatus.includes(n));
              const finalLabels = [...new Set([...filtered, label])];
              await github.rest.issues.update({ owner, repo, issue_number, labels: finalLabels });
            }

            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            const project = await getOrgProjectByNumberOrName(ORG, PROJECT_NUMBER, PROJECT_NAME);
            const backlogId = await getColumnIdByName(project.id, COLUMN_NAMES.backlog);

            // 이슈를 백로그 컬럼 카드로 추가
            const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number });
            const { data: card } = await github.request('POST /projects/columns/{column_id}/cards', {
              column_id: backlogId,
              content_id: issue.id,
              content_type: 'Issue',
              headers: inertiaHeader,
            });
            core.info(`백로그에 카드 생성됨: card=${card.id}, issue=#${issue_number}`);
            await setIssueStatusLabel(owner, repo, issue_number, COLUMN_NAMES.backlog);
      env:
        ORG: ${{ inputs.org }}
        PROJECT_NUMBER: ${{ inputs['project-number'] }}
        PROJECT_NAME: ${{ inputs['project-name'] }}
        BACKLOG: ${{ inputs.backlog }}
        PLANNED: ${{ inputs.planned }}
        IN_PROGRESS: ${{ inputs['in-progress'] }}
        REVIEW: ${{ inputs.review }}
        DONE: ${{ inputs.done }}
