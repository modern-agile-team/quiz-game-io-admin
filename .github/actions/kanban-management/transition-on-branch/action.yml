name: 칸반 - 브랜치 생성 시 전환
description: 브랜치가 생성/푸시되면 연결된 이슈를 Projects(v2) 보드 ‘작업중’으로 이동합니다
inputs:
  org:
    description: 조직 로그인(organization 로그인)
    required: true
  project-number:
    description: Projects(v2) 보드 번호(선택)
    required: false
  project-name:
    description: Projects(v2) 보드 제목(번호가 없거나 다를 때 사용)
    required: false
  backlog:
    description: 백로그 컬럼 이름
    required: true
  planned:
    description: 작업 예정 컬럼 이름
    required: true
  in-progress:
    description: 작업중 컬럼 이름
    required: true
  review:
    description: 리뷰 대기 컬럼 이름
    required: true
  done:
    description: 완료 컬럼 이름
    required: true
  github-token:
    description: 조직 클래식 프로젝트 API 접근 토큰(PAT 권장). 미설정 시 GITHUB_TOKEN 사용
    required: false
    default: ${{ github.token }}
  allow-push:
    description: push 이벤트에서도 동작시키기 (기본 false)
    required: false
    default: 'false'
runs:
  using: composite
  steps:
    - name: 브랜치 생성/푸시 시 ‘작업중’으로 이동
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const allowPush = ((process.env.ALLOW_PUSH || 'false') + '').toLowerCase() === 'true';
          const isCreateBranch = (context.eventName === 'create' && context.payload.ref_type === 'branch');
          const isPush = (context.eventName === 'push');
          if (!(isCreateBranch || (allowPush && isPush))) { core.info('대상 이벤트가 아님: 건너뜀'); return; }

          const ORG = process.env.ORG || context.repo.owner;
          core.info(`해결된 ORG: '${ORG}'`);
          const PROJECT_NUMBER = process.env.PROJECT_NUMBER ? parseInt(process.env.PROJECT_NUMBER, 10) : undefined;
          const PROJECT_NAME = process.env.PROJECT_NAME || undefined;
          const STATUS_MAP = {
            backlog: process.env.BACKLOG,
            planned: process.env.PLANNED,
            inProgress: process.env.IN_PROGRESS,
            review: process.env.REVIEW,
            done: process.env.DONE,
          };

          function extractIssueNumbersFromBranch(ref) {
            if (!ref) return [];
            const nums = new Set();
            const m = ref.match(/(?:(?:^|[\/\-_]))(\d{1,6})(?=$|[\/\-_])/g);
            if (m) for (const s of m) {
              const n = parseInt(s.replace(/\D/g, ''), 10);
              if (!isNaN(n)) nums.add(n);
            }
            return [...nums];
          }

          const gql = String.raw;
          async function getProjectV2(org, number, name) {
            if (number) {
              try {
                const q = gql`query($org:String!,$num:Int!){ organization(login:$org){ projectV2(number:$num){ id title number fields(first:50){ nodes { __typename ... on ProjectV2FieldCommon { id name dataType } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }`;
                const r = await github.graphql(q, { org, num: number });
                const p = r?.organization?.projectV2;
                if (p) return p;
              } catch (e) {
                core.warning(`projectV2 번호(${number}) 조회 실패: ${e.message}`);
              }
            }
            try {
              const q = gql`query($org:String!){ organization(login:$org){ projectsV2(first:100){ nodes { id title number fields(first:50){ nodes { __typename ... on ProjectV2FieldCommon { id name dataType } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } } }`;
              const r = await github.graphql(q, { org });
              const list = r?.organization?.projectsV2?.nodes || [];
              core.info(`v2 프로젝트 목록(Org): ${list.map(n => `${n.number}:${n.title}`).join(', ')}`);
              if (name) {
                const p = list.find(n => n.title === name);
                if (p) return p;
              }
              if (number) {
                const p = list.find(n => n.number === number);
                if (p) return p;
              }
            } catch (e) {
              core.warning(`projectsV2 목록 조회 실패(Org): ${e.message}`);
            }
            // Repo-level Projects(v2) fallback
            try {
              const { owner, repo } = context.repo;
              const q = gql`query($owner:String!,$repo:String!){ repository(owner:$owner,name:$repo){ projectsV2(first:100){ nodes { id title number fields(first:50){ nodes { __typename ... on ProjectV2FieldCommon { id name dataType } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } } }`;
              const r2 = await github.graphql(q, { owner, repo });
              const list2 = r2?.repository?.projectsV2?.nodes || [];
              core.info(`v2 프로젝트 목록(Repo ${owner}/${repo}): ${list2.map(n => `${n.number}:${n.title}`).join(', ')}`);
              if (name) {
                const p = list2.find(n => n.title === name);
                if (p) return p;
              }
              if (number) {
                const p = list2.find(n => n.number === number);
                if (p) return p;
              }
            } catch (e) {
              core.warning(`projectsV2 목록 조회 실패(Repo): ${e.message}`);
            }
            return null;
          }

          async function getIssueId(owner, repo, number) {
            const q = gql`query($owner:String!,$repo:String!,$num:Int!){ repository(owner:$owner,name:$repo){ issue(number:$num){ id } } }`;
            const r = await github.graphql(q, { owner, repo, num: number });
            return r?.repository?.issue?.id || null;
          }

          async function ensureItem(projectId, issueId) {
            const q = gql`query($id:ID!){ node(id:$id){ ... on Issue { projectItems(first:50){ nodes { id project{ id title number } } } } } }`;
            const r = await github.graphql(q, { id: issueId });
            const existing = r?.node?.projectItems?.nodes?.find(n => n.project?.id === projectId);
            if (existing) return existing.id;
            const m = gql`mutation($projectId:ID!,$contentId:ID!){ addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item { id } } }`;
            const res = await github.graphql(m, { projectId, contentId: issueId });
            return res?.addProjectV2ItemById?.item?.id;
          }

          function findStatusField(project) {
            const fields = project?.fields?.nodes || [];
            let field = fields.find(f => f.name === 'Status') || fields.find(f => f.name === '상태');
            if (!field) field = fields.find(f => (f.__typename === 'ProjectV2SingleSelectField'));
            return field;
          }

          async function setStatus(project, itemId, statusName) {
            const field = findStatusField(project);
            if (!field || !field.options) { core.warning('Status 필드를 찾지 못했거나 옵션이 없습니다.'); return; }
            const opt = field.options.find(o => o.name === statusName);
            if (!opt) { core.warning(`Status 옵션을 찾지 못했습니다: ${statusName}. 사용 가능: ${field.options.map(o=>o.name).join(', ')}`); return; }
            const m = gql`mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){ updateProjectV2ItemFieldValue(input:{ projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ singleSelectOptionId:$optionId }}){ projectV2Item { id } } }`;
            await github.graphql(m, { projectId: project.id, itemId, fieldId: field.id, optionId: opt.id });
          }

          const ref = context.payload.ref;
          const nums = extractIssueNumbersFromBranch(ref);
          if (!nums.length) { core.info('브랜치명에서 이슈 번호를 찾지 못함'); return; }

          const { owner, repo } = context.repo;
          const project = await getProjectV2(ORG, PROJECT_NUMBER, PROJECT_NAME);
          if (!project) { core.warning('Projects(v2) 프로젝트를 찾지 못해 이동을 건너뜁니다.'); return; }

          for (const issue_number of nums) {
            try {
              const issueId = await getIssueId(owner, repo, issue_number);
              if (!issueId) { core.warning(`#${issue_number} 이슈 ID 없음`); continue; }
              const itemId = await ensureItem(project.id, issueId);
              if (!itemId) { core.warning(`#${issue_number} 아이템 생성/확인 실패`); continue; }
              await setStatus(project, itemId, STATUS_MAP.inProgress);
              // 라벨 동기화
              const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number });
              const allStatus = Object.values(STATUS_MAP);
              const existing = issue.labels.map(l => typeof l === 'string' ? l : l.name);
              const filtered = existing.filter(n => !allStatus.includes(n));
              const finalLabels = [...new Set([...filtered, STATUS_MAP.inProgress])];
              await github.rest.issues.update({ owner, repo, issue_number, labels: finalLabels });
              core.info(`#${issue_number} -> ${STATUS_MAP.inProgress}`);
            } catch (e) {
              core.warning(`상태 갱신 실패 #${issue_number}: ${e.message}`);
            }
          }
      env:
        ORG: ${{ inputs.org }}
        PROJECT_NUMBER: ${{ inputs['project-number'] }}
        PROJECT_NAME: ${{ inputs['project-name'] }}
        BACKLOG: ${{ inputs.backlog }}
        PLANNED: ${{ inputs.planned }}
        IN_PROGRESS: ${{ inputs['in-progress'] }}
        REVIEW: ${{ inputs.review }}
        DONE: ${{ inputs.done }}
        ALLOW_PUSH: ${{ inputs['allow-push'] }}
