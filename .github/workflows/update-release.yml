name: 버전 릴리즈

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  sync-develop:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version
        id: version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "Extracted version from package.json: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: PR 생성 후 머지 (main(${{ steps.version.outputs.VERSION }}) -> develop)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          MAIN_BRANCH: main
          BASE_BRANCH: develop
          TITLE: Merge '${{ steps.version.outputs.VERSION }}' into develop
          BODY: |
            Merge tag '${{ steps.version.outputs.VERSION }}' into develop.

            > This PR was created automatically for up-to-date develop branch and will merge immediately.
        run: |
          # Find existing PR from main -> develop, or create it
          PR_NUMBER=$(gh pr list --head "$MAIN_BRANCH" --base "$BASE_BRANCH" --state open --json number --jq '.[0].number')
          if [ -z "$PR_NUMBER" ]; then
            gh pr create --head "$MAIN_BRANCH" --base "$BASE_BRANCH" --title "$TITLE" --body "$BODY"
            PR_NUMBER=$(gh pr list --head "$MAIN_BRANCH" --base "$BASE_BRANCH" --state open --json number --jq '.[0].number')
          fi
          echo "Target PR: #$PR_NUMBER"
          # Set auto-merge so it merges once branch protection requirements are satisfied
          gh pr merge "$PR_NUMBER" --merge --auto

  release-notes:
    needs: [sync-develop]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 릴리즈 노트 작성
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          VERSION: ${{ needs.sync-develop.outputs.version }}
        run: |
          if [ -z "$VERSION" ]; then
            echo "Version not found from previous job outputs" >&2
            exit 1
          fi
          TAG="$VERSION"
          echo "Creating or ensuring release for tag '$TAG'"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release '$TAG' already exists. Skipping creation."
          else
            gh release create "$TAG" --generate-notes --title "$TAG"
          fi
