/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * quizzes-game-io-backend
 * The Quizzes Game IO Backend API
 * OpenAPI spec version: 0.1
 */
export interface AccountDto {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** Account role */
  role: string;
  /** Account sign in type */
  signInType: string;
  nickname: string;
  /** ÏßÑÏûÖ ÏãúÏ†ê */
  enteredAt: string;
  leftAt: string;
  isActive: boolean;
}

export interface AccountCollectionDto {
  data: AccountDto[];
}

export interface SignUpWithUsernameDto {
  username: string;
  password: string;
}

export interface AuthTokenDto {
  accessToken: string;
}

export interface SignInWithUsernameDto {
  username: string;
  password: string;
}

export interface CreateGameRoomDto {
  /**
   * Í≤åÏûÑ Î∞© Ï†úÎ™©
   * @minLength 1
   * @maxLength 50
   */
  title: string;
  /**
   * @minimum 10
   * @maximum 100
   */
  quizzesCount: number;
}

export type GameRoomMemberDtoRole = typeof GameRoomMemberDtoRole[keyof typeof GameRoomMemberDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameRoomMemberDtoRole = {
  host: 'host',
  player: 'player',
} as const;

export interface GameRoomMemberDto {
  id: string;
  createdAt: string;
  updatedAt: string;
  accountId: string;
  gameRoomId: string;
  role: GameRoomMemberDtoRole;
  /** Í≤åÏûÑÎ∞© Íµ¨ÏÑ±ÏõêÏùò ÎãâÎÑ§ÏûÑ(Í≥ÑÏ†ï ÎãâÎÑ§ÏûÑÍ≥º ÎèôÏùºÌï®) */
  nickname: string;
}

export type GameRoomDtoStatus = typeof GameRoomDtoStatus[keyof typeof GameRoomDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameRoomDtoStatus = {
  waiting: 'waiting',
  starting: 'starting',
  inProgress: 'inProgress',
  finished: 'finished',
  paused: 'paused',
} as const;

export interface GameRoomDto {
  id: string;
  createdAt: string;
  updatedAt: string;
  hostId: string;
  status: GameRoomDtoStatus;
  title: string;
  maxMembersCount: number;
  currentMembersCount: number;
  quizTimeLimitInSeconds: number;
  quizzesCount: number;
  members: GameRoomMemberDto[];
}

export interface GameRoomMemberCollectionDto {
  data: GameRoomMemberDto[];
}

export interface GameRoomCollectionDto {
  data: GameRoomDto[];
}

export interface QuizDto {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** ÌÄ¥Ï¶à Ïú†Ìòï */
  type: string;
  /** ÌÄ¥Ï¶à ÏßàÎ¨∏ */
  question?: string;
  /** ÌÄ¥Ï¶à Ï†ïÎãµ */
  answer: string;
  /** ÌÄ¥Ï¶à Ïù¥ÎØ∏ÏßÄ URL */
  imageUrl?: string;
}

export interface QuizCollectionDto {
  data: QuizDto[];
}

/**
 * error code
 */
export type ListQuizzesControllerListQuizzes400Code = typeof ListQuizzesControllerListQuizzes400Code[keyof typeof ListQuizzesControllerListQuizzes400Code];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuizzesControllerListQuizzes400Code = {
  COMMONREQUEST_VALIDATION_ERROR: 'COMMON.REQUEST_VALIDATION_ERROR',
} as const;

export type ListQuizzesControllerListQuizzes400 = {
  /** http status code */
  statusCode?: number;
  /** error message */
  message?: string;
  /** error code */
  code?: ListQuizzesControllerListQuizzes400Code;
};

/**
 * error code
 */
export type ListQuizzesControllerListQuizzes401Code = typeof ListQuizzesControllerListQuizzes401Code[keyof typeof ListQuizzesControllerListQuizzes401Code];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuizzesControllerListQuizzes401Code = {
  COMMONUNAUTHORIZED: 'COMMON.UNAUTHORIZED',
} as const;

export type ListQuizzesControllerListQuizzes401 = {
  /** http status code */
  statusCode?: number;
  /** error message */
  message?: string;
  /** error code */
  code?: ListQuizzesControllerListQuizzes401Code;
};

/**
 * error code
 */
export type ListQuizzesControllerListQuizzes403Code = typeof ListQuizzesControllerListQuizzes403Code[keyof typeof ListQuizzesControllerListQuizzes403Code];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuizzesControllerListQuizzes403Code = {
  COMMONPERMISSION_DENIED: 'COMMON.PERMISSION_DENIED',
} as const;

export type ListQuizzesControllerListQuizzes403 = {
  /** http status code */
  statusCode?: number;
  /** error message */
  message?: string;
  /** error code */
  code?: ListQuizzesControllerListQuizzes403Code;
};

