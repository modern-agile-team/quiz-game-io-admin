/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as menusRouteRouteImport } from './routes/(menus)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as menusQuizzesIndexRouteImport } from './routes/(menus)/quizzes/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'
import { Route as menusQuizzesEditIndexRouteImport } from './routes/(menus)/quizzes/edit/index'
import { Route as menusQuizzesCreateIndexRouteImport } from './routes/(menus)/quizzes/create/index'
import { Route as menusQuizzesIdIndexRouteImport } from './routes/(menus)/quizzes/$id/index'
import { Route as menusQuizzesIdEditIndexRouteImport } from './routes/(menus)/quizzes/$id/edit/index'
import { Route as menusAssetsImagesIndexRouteImport } from './routes/(menus)/assets/images/index'

const menusRouteRoute = menusRouteRouteImport.update({
  id: '/(menus)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const menusQuizzesIndexRoute = menusQuizzesIndexRouteImport.update({
  id: '/quizzes/',
  path: '/quizzes/',
  getParentRoute: () => menusRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authRouteRoute,
} as any)
const menusQuizzesEditIndexRoute = menusQuizzesEditIndexRouteImport.update({
  id: '/quizzes/edit/',
  path: '/quizzes/edit/',
  getParentRoute: () => menusRouteRoute,
} as any)
const menusQuizzesCreateIndexRoute = menusQuizzesCreateIndexRouteImport.update({
  id: '/quizzes/create/',
  path: '/quizzes/create/',
  getParentRoute: () => menusRouteRoute,
} as any)
const menusQuizzesIdIndexRoute = menusQuizzesIdIndexRouteImport.update({
  id: '/quizzes/$id/',
  path: '/quizzes/$id/',
  getParentRoute: () => menusRouteRoute,
} as any)
const menusQuizzesIdEditIndexRoute = menusQuizzesIdEditIndexRouteImport.update({
  id: '/quizzes/$id/edit/',
  path: '/quizzes/$id/edit/',
const menusAssetsImagesIndexRoute = menusAssetsImagesIndexRouteImport.update({
  id: '/assets/images/',
  path: '/assets/images/',
  getParentRoute: () => menusRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof menusRouteRouteWithChildren
  '/login': typeof authLoginIndexRoute
  '/quizzes': typeof menusQuizzesIndexRoute
  '/quizzes/$id': typeof menusQuizzesIdIndexRoute
  '/quizzes/create': typeof menusQuizzesCreateIndexRoute
  '/quizzes/edit': typeof menusQuizzesEditIndexRoute
  '/quizzes/$id/edit': typeof menusQuizzesIdEditIndexRoute
  '/assets/images': typeof menusAssetsImagesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof menusRouteRouteWithChildren
  '/login': typeof authLoginIndexRoute
  '/quizzes': typeof menusQuizzesIndexRoute
  '/quizzes/$id': typeof menusQuizzesIdIndexRoute
  '/quizzes/create': typeof menusQuizzesCreateIndexRoute
  '/quizzes/edit': typeof menusQuizzesEditIndexRoute
  '/quizzes/$id/edit': typeof menusQuizzesIdEditIndexRoute
  '/assets/images': typeof menusAssetsImagesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(menus)': typeof menusRouteRouteWithChildren
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(menus)/quizzes/': typeof menusQuizzesIndexRoute
  '/(menus)/quizzes/$id/': typeof menusQuizzesIdIndexRoute
  '/(menus)/quizzes/create/': typeof menusQuizzesCreateIndexRoute
  '/(menus)/quizzes/edit/': typeof menusQuizzesEditIndexRoute
  '/(menus)/quizzes/$id/edit/': typeof menusQuizzesIdEditIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/quizzes'
    | '/quizzes/$id'
    | '/quizzes/create'
    | '/quizzes/edit'
    | '/quizzes/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/quizzes'
    | '/quizzes/$id'
    | '/quizzes/create'
    | '/quizzes/edit'
    | '/quizzes/$id/edit'
  '/(menus)/assets/images/': typeof menusAssetsImagesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/quizzes' | '/assets/images'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/quizzes' | '/assets/images'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(menus)'
    | '/(auth)/login/'
    | '/(menus)/quizzes/'
    | '/(menus)/quizzes/$id/'
    | '/(menus)/quizzes/create/'
    | '/(menus)/quizzes/edit/'
    | '/(menus)/quizzes/$id/edit/'
    | '/(menus)/assets/images/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  menusRouteRoute: typeof menusRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(menus)': {
      id: '/(menus)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof menusRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(menus)/quizzes/': {
      id: '/(menus)/quizzes/'
      path: '/quizzes'
      fullPath: '/quizzes'
      preLoaderRoute: typeof menusQuizzesIndexRouteImport
      parentRoute: typeof menusRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(menus)/quizzes/edit/': {
      id: '/(menus)/quizzes/edit/'
      path: '/quizzes/edit'
      fullPath: '/quizzes/edit'
      preLoaderRoute: typeof menusQuizzesEditIndexRouteImport
      parentRoute: typeof menusRouteRoute
    }
    '/(menus)/quizzes/create/': {
      id: '/(menus)/quizzes/create/'
      path: '/quizzes/create'
      fullPath: '/quizzes/create'
      preLoaderRoute: typeof menusQuizzesCreateIndexRouteImport
      parentRoute: typeof menusRouteRoute
    }
    '/(menus)/quizzes/$id/': {
      id: '/(menus)/quizzes/$id/'
      path: '/quizzes/$id'
      fullPath: '/quizzes/$id'
      preLoaderRoute: typeof menusQuizzesIdIndexRouteImport
      parentRoute: typeof menusRouteRoute
    }
    '/(menus)/quizzes/$id/edit/': {
      id: '/(menus)/quizzes/$id/edit/'
      path: '/quizzes/$id/edit'
      fullPath: '/quizzes/$id/edit'
      preLoaderRoute: typeof menusQuizzesIdEditIndexRouteImport
    '/(menus)/assets/images/': {
      id: '/(menus)/assets/images/'
      path: '/assets/images'
      fullPath: '/assets/images'
      preLoaderRoute: typeof menusAssetsImagesIndexRouteImport
      parentRoute: typeof menusRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface menusRouteRouteChildren {
  menusQuizzesIndexRoute: typeof menusQuizzesIndexRoute
  menusQuizzesIdIndexRoute: typeof menusQuizzesIdIndexRoute
  menusQuizzesCreateIndexRoute: typeof menusQuizzesCreateIndexRoute
  menusQuizzesEditIndexRoute: typeof menusQuizzesEditIndexRoute
  menusQuizzesIdEditIndexRoute: typeof menusQuizzesIdEditIndexRoute
  menusAssetsImagesIndexRoute: typeof menusAssetsImagesIndexRoute
}

const menusRouteRouteChildren: menusRouteRouteChildren = {
  menusQuizzesIndexRoute: menusQuizzesIndexRoute,
  menusQuizzesIdIndexRoute: menusQuizzesIdIndexRoute,
  menusQuizzesCreateIndexRoute: menusQuizzesCreateIndexRoute,
  menusQuizzesEditIndexRoute: menusQuizzesEditIndexRoute,
  menusQuizzesIdEditIndexRoute: menusQuizzesIdEditIndexRoute,
  menusAssetsImagesIndexRoute: menusAssetsImagesIndexRoute,
}

const menusRouteRouteWithChildren = menusRouteRoute._addFileChildren(
  menusRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  menusRouteRoute: menusRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
